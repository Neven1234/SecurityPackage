using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SecurityLibrary
{
    public class Monoalphabetic : ICryptographicTechnique<string, string>
    {
        string secured = "";
        string decrypted = "";
        string KEY = "";
        public string Analyse(string plainText, string cipherText)
        {
            List<int> arr = new List<int>();
            foreach (char c in plainText)
            {
                arr.Add(char.ToUpper(c) - 65);
            }

            arr.Sort();
            List<int> newarr = arr.Distinct().ToList();
            string sorted = "";
            for (int i = 0; i < newarr.Count; i++)
            {
                sorted += (char)(newarr[i] + 97);
            }
            string alpha = "abcdefghijklmnopqrstuvwxyz";
            string res = "";

            foreach (char c in alpha)
            {
                if (cipherText.Contains(char.ToUpper(c)))
                {
                    continue;
                }
                else
                {
                    res += c;
                }


            }
            int j = 0;
            foreach (char c in alpha)
            {
                if (sorted.Contains(c))
                {
                    int index = plainText.IndexOf(c);
                    KEY += char.ToLower(cipherText[index]);
                }
                else
                {
                    KEY += res[j];
                    j++;
                }

            }

            return KEY;
        }

        public string Decrypt(string cipherText, string key)
        {
            foreach (char c in cipherText)
            {
                int index = key.IndexOf(char.ToLower(c));
                decrypted += (char)(index + 97);
            }
            return decrypted;
        }

        public string Encrypt(string plainText, string key)
        {
            foreach (char c in plainText)
            {
                int temp = char.ToUpper(c) - 65;
                secured += key[temp];
            }
            return secured;
        }

        /// <summary>
        /// Frequency Information:
        /// E   12.51% //4
        /// T	9.25   //19
        /// A	8.04  //0
        /// O	7.60  //14
        /// I	7.26   //8
        /// N	7.09  //13
        /// S	6.54  ///18
        /// R	6.12   //17
        /// H	5.49  //7
        /// L	4.14  //11
        /// D	3.99  //3
        /// C	3.06  //2
        /// U	2.71  //20
        /// M	2.53  //12
        /// F	2.30  //5
        /// P	2.00  //15
        /// G	1.96  //6
        /// W	1.92  //22
        /// Y	1.73  //24
        /// B	1.54  //1
        /// V	0.99  //21
        /// K	0.67   //10
        /// X	0.19  //23
        /// J	0.16  //9
        /// Q	0.11  //16
        /// Z	0.09  //25
        /// </summary>
        /// <param name="cipher"></param>
        /// <returns>Plain text</returns>
        public string AnalyseUsingCharFrequency(string cipher)
        {
            var frequency = new Dictionary<char, char>();
            //string cc
            var characterCount = new Dictionary<char, int>();

            foreach (var c in cipher)
            {
                if (characterCount.ContainsKey(c))
                    characterCount[c]++;
                else
                    characterCount[c] = 1;
            }
            double i = 0;
            characterCount = characterCount.OrderBy(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
            string alpha = "ETAOINSRHLDCUMFPGWYBVKXJQZ";
            int j = 25;
            string key = "";
            foreach (char alphapet in alpha)
            {
                frequency.Add(alphapet, characterCount.ElementAt(j).Key);
                j--;
            }
            string ABC = "abcdefghijklmnopqrstuvwxyz";
            foreach (char abc in ABC)
            {
                key += frequency[char.ToUpper(abc)];
            }
            string plan = "";
            foreach (char ch in cipher)
            {
                plan += frequency.FirstOrDefault(x => x.Value == ch).Key;
            }

            return plan;
        }
    }
}
